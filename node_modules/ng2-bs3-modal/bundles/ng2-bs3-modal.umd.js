(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng2-bs3-modal', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (factory((global['ng2-bs3-modal'] = {}),global.ng.core,global.rxjs,global.rxjs.operators,global.ng.common));
}(this, (function (exports,core,rxjs,operators,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var BsModalHideType = {
        Close: 0,
        Dismiss: 1,
        Backdrop: 2,
        Keyboard: 3,
        RouteChange: 4,
        Destroy: 5,
    };
    BsModalHideType[BsModalHideType.Close] = 'Close';
    BsModalHideType[BsModalHideType.Dismiss] = 'Dismiss';
    BsModalHideType[BsModalHideType.Backdrop] = 'Backdrop';
    BsModalHideType[BsModalHideType.Keyboard] = 'Keyboard';
    BsModalHideType[BsModalHideType.RouteChange] = 'RouteChange';
    BsModalHideType[BsModalHideType.Destroy] = 'Destroy';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BsModalSize = (function () {
        function BsModalSize() {
        }
        /**
         * @param {?} size
         * @return {?}
         */
        BsModalSize.isValidSize = /**
         * @param {?} size
         * @return {?}
         */
            function (size) {
                return size && (size === BsModalSize.Small || size === BsModalSize.Large);
            };
        BsModalSize.Small = 'sm';
        BsModalSize.Large = 'lg';
        return BsModalSize;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var EVENT_SUFFIX = 'ng2-bs3-modal';
    /** @type {?} */
    var KEYUP_EVENT_NAME = "keyup." + EVENT_SUFFIX;
    /** @type {?} */
    var CLICK_EVENT_NAME = "click." + EVENT_SUFFIX;
    /** @type {?} */
    var SHOW_EVENT_NAME = "show.bs.modal." + EVENT_SUFFIX;
    var BsModalService = (function () {
        function BsModalService() {
            var _this = this;
            this.modals = [];
            this.$body = jQuery(document.body);
            this.onBackdropClose$ = rxjs.fromEvent(this.$body, CLICK_EVENT_NAME).pipe(operators.filter(function (e) { return jQuery(e.target).is('.modal'); }), operators.map(function () { return BsModalHideType.Backdrop; }), operators.share());
            this.onKeyboardClose$ = rxjs.fromEvent(this.$body, KEYUP_EVENT_NAME).pipe(operators.filter(function (e) { return e.which === 27; }), operators.map(function () { return BsModalHideType.Keyboard; }), operators.share());
            this.onModalStack$ = rxjs.fromEvent(this.$body, SHOW_EVENT_NAME).pipe(operators.tap(function () {
                /** @type {?} */
                var zIndex = 1040 + (10 * jQuery('.modal:visible').length);
                jQuery(_this).css('z-index', zIndex);
                setTimeout(function () {
                    jQuery('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
                }, 0);
            }), operators.share());
        }
        /**
         * @param {?} modal
         * @return {?}
         */
        BsModalService.prototype.add = /**
         * @param {?} modal
         * @return {?}
         */
            function (modal) {
                this.modals.push(modal);
            };
        /**
         * @param {?} modal
         * @return {?}
         */
        BsModalService.prototype.remove = /**
         * @param {?} modal
         * @return {?}
         */
            function (modal) {
                /** @type {?} */
                var index = this.modals.indexOf(modal);
                if (index > -1) {
                    this.modals.splice(index, 1);
                }
            };
        /**
         * @return {?}
         */
        BsModalService.prototype.focusNext = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var visible = this.modals.filter(function (m) { return m.visible; });
                if (visible.length) {
                    this.$body.addClass('modal-open');
                    visible[visible.length - 1].focus();
                }
            };
        /**
         * @return {?}
         */
        BsModalService.prototype.dismissAll = /**
         * @return {?}
         */
            function () {
                return Promise.all(this.modals.map(function (m) {
                    return m.dismiss();
                }));
            };
        BsModalService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        BsModalService.ctorParameters = function () { return []; };
        return BsModalService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var EVENT_SUFFIX$1 = 'ng2-bs3-modal';
    /** @type {?} */
    var SHOW_EVENT_NAME$1 = "show.bs.modal." + EVENT_SUFFIX$1;
    /** @type {?} */
    var SHOWN_EVENT_NAME = "shown.bs.modal." + EVENT_SUFFIX$1;
    /** @type {?} */
    var HIDE_EVENT_NAME = "hide.bs.modal." + EVENT_SUFFIX$1;
    /** @type {?} */
    var HIDDEN_EVENT_NAME = "hidden.bs.modal." + EVENT_SUFFIX$1;
    /** @type {?} */
    var LOADED_EVENT_NAME = "loaded.bs.modal." + EVENT_SUFFIX$1;
    /** @type {?} */
    var DATA_KEY = 'bs.modal';
    var BsModalComponent = (function () {
        function BsModalComponent(element, service, zone) {
            var _this = this;
            this.element = element;
            this.service = service;
            this.zone = zone;
            this.overrideSize = null;
            this.onInternalClose$ = new rxjs.Subject();
            this.subscriptions = [];
            this.visible = false;
            this.showing = false;
            this.hiding = false;
            this.animation = true;
            this.backdrop = true;
            this.keyboard = true;
            this.onShow = new core.EventEmitter();
            this.onOpen = new core.EventEmitter();
            this.onHide = new core.EventEmitter();
            this.onClose = new core.EventEmitter();
            this.onDismiss = new core.EventEmitter();
            this.onLoaded = new core.EventEmitter();
            this.setVisible = function (isVisible) {
                return function () {
                    _this.visible = isVisible;
                    _this.showing = false;
                    _this.hiding = false;
                };
            };
            this.setOptions = function (options) {
                /** @type {?} */
                var backdrop = options.backdrop;
                if (typeof backdrop === 'string' && backdrop !== 'static') {
                    backdrop = true;
                }
                if (options.backdrop !== undefined) {
                    _this.options.backdrop = backdrop;
                }
                if (options.keyboard !== undefined) {
                    _this.options.keyboard = options.keyboard;
                }
            };
            this.service.add(this);
            this.init();
        }
        Object.defineProperty(BsModalComponent.prototype, "options", {
            get: /**
             * @return {?}
             */ function () {
                if (!this.$modal) {
                    this.init();
                }
                return this.$modal.data(DATA_KEY).options;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BsModalComponent.prototype, "fadeClass", {
            get: /**
             * @return {?}
             */ function () { return this.animation; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BsModalComponent.prototype, "modalClass", {
            get: /**
             * @return {?}
             */ function () { return true; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BsModalComponent.prototype, "roleAttr", {
            get: /**
             * @return {?}
             */ function () { return 'dialog'; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BsModalComponent.prototype, "tabindexAttr", {
            get: /**
             * @return {?}
             */ function () { return '-1'; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        BsModalComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.wireUpEventEmitters();
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.$dialog = this.$modal.find('.modal-dialog');
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.setOptions({
                    backdrop: this.backdrop,
                    keyboard: this.keyboard
                });
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.onInternalClose$.next(BsModalHideType.Destroy);
                return this.destroy();
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.focus = /**
         * @return {?}
         */
            function () {
                this.$modal.trigger('focus');
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.routerCanDeactivate = /**
         * @return {?}
         */
            function () {
                this.onInternalClose$.next(BsModalHideType.RouteChange);
                return this.destroy();
            };
        /**
         * @param {?=} size
         * @return {?}
         */
        BsModalComponent.prototype.open = /**
         * @param {?=} size
         * @return {?}
         */
            function (size) {
                this.overrideSize = null;
                if (BsModalSize.isValidSize(size)) {
                    this.overrideSize = size;
                }
                return this.show().toPromise();
            };
        /**
         * @param {?=} value
         * @return {?}
         */
        BsModalComponent.prototype.close = /**
         * @param {?=} value
         * @return {?}
         */
            function (value) {
                var _this = this;
                this.onInternalClose$.next(BsModalHideType.Close);
                return this.hide().pipe(operators.tap(function () { return _this.onClose.emit(value); })).toPromise().then(function () { return value; });
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.dismiss = /**
         * @return {?}
         */
            function () {
                this.onInternalClose$.next(BsModalHideType.Dismiss);
                return this.hide().toPromise();
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.getCssClasses = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var classes = [];
                if (this.isSmall()) {
                    classes.push('modal-sm');
                }
                if (this.isLarge()) {
                    classes.push('modal-lg');
                }
                if (this.cssClass) {
                    classes.push(this.cssClass);
                }
                return classes.join(' ');
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.isSmall = /**
         * @return {?}
         */
            function () {
                return this.overrideSize !== BsModalSize.Large
                    && this.size === BsModalSize.Small
                    || this.overrideSize === BsModalSize.Small;
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.isLarge = /**
         * @return {?}
         */
            function () {
                return this.overrideSize !== BsModalSize.Small
                    && this.size === BsModalSize.Large
                    || this.overrideSize === BsModalSize.Large;
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.show = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.visible && !this.hiding) {
                    return rxjs.of(null);
                }
                this.showing = true;
                return rxjs.Observable.create(function (o) {
                    _this.onShown$.pipe(operators.take(1)).subscribe(function (next) {
                        o.next(next);
                        o.complete();
                    });
                    _this.transitionFix();
                    _this.$modal.modal('show');
                });
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.transitionFix = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // Fix for shown.bs.modal not firing when .fade is present
                // https://github.com/twbs/bootstrap/issues/11793
                if (this.animation) {
                    setTimeout(function () {
                        _this.$modal.trigger('focus').trigger(SHOWN_EVENT_NAME);
                    }, jQuery.fn.modal['Constructor'].TRANSITION_DURATION);
                }
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.hide = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.visible && !this.showing) {
                    return rxjs.of(null);
                }
                this.hiding = true;
                return rxjs.Observable.create(function (o) {
                    _this.onHidden$.pipe(operators.take(1)).subscribe(function (next) {
                        o.next(next);
                        o.complete();
                    });
                    _this.$modal.modal('hide');
                });
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.init = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.$modal = jQuery(this.element.nativeElement);
                this.$modal.appendTo(document.body);
                this.$modal.modal({
                    show: false
                });
                this.onShowEvent$ = rxjs.fromEvent(this.$modal, SHOW_EVENT_NAME$1);
                this.onShownEvent$ = rxjs.fromEvent(this.$modal, SHOWN_EVENT_NAME);
                this.onHideEvent$ = rxjs.fromEvent(this.$modal, HIDE_EVENT_NAME);
                this.onHiddenEvent$ = rxjs.fromEvent(this.$modal, HIDDEN_EVENT_NAME);
                this.onLoadedEvent$ = rxjs.fromEvent(this.$modal, LOADED_EVENT_NAME);
                /** @type {?} */
                var onClose$ = rxjs.merge(this.onInternalClose$, this.service.onBackdropClose$, this.service.onKeyboardClose$);
                this.onHide$ = rxjs.zip(this.onHideEvent$, onClose$).pipe(operators.map(function (x) { return ({ event: x[0], type: x[1] }); }));
                this.onHidden$ = rxjs.zip(this.onHiddenEvent$, onClose$).pipe(operators.map(function (x) { return x[1]; }), operators.tap(this.setVisible(false)), operators.tap(function () { return _this.service.focusNext(); }), operators.share());
                this.onShown$ = this.onShownEvent$.pipe(operators.tap(this.setVisible(true)), operators.share());
                this.onDismiss$ = this.onHidden$.pipe(operators.filter(function (x) { return x !== BsModalHideType.Close; }));
                // Start watching for events
                // Start watching for events
                (_a = this.subscriptions).push.apply(_a, __spread([
                    this.onShown$.subscribe(function () { }),
                    this.onHidden$.subscribe(function () { }),
                    this.service.onModalStack$.subscribe(function () { })
                ]));
                var _a;
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.wireUpEventEmitters = /**
         * @return {?}
         */
            function () {
                this.wireUpEventEmitter(this.onShow, this.onShowEvent$);
                this.wireUpEventEmitter(this.onOpen, this.onShown$);
                this.wireUpEventEmitter(this.onHide, this.onHide$);
                this.wireUpEventEmitter(this.onDismiss, this.onDismiss$);
                this.wireUpEventEmitter(this.onLoaded, this.onLoadedEvent$);
            };
        /**
         * @template T
         * @param {?} emitter
         * @param {?} stream$
         * @return {?}
         */
        BsModalComponent.prototype.wireUpEventEmitter = /**
         * @template T
         * @param {?} emitter
         * @param {?} stream$
         * @return {?}
         */
            function (emitter, stream$) {
                var _this = this;
                if (emitter.observers.length === 0) {
                    return;
                }
                /** @type {?} */
                var sub = stream$.subscribe(function (next) {
                    _this.zone.run(function () {
                        emitter.next(next);
                    });
                });
                this.subscriptions.push(sub);
            };
        /**
         * @return {?}
         */
        BsModalComponent.prototype.destroy = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return this.hide().pipe(operators.tap(function () {
                    _this.service.remove(_this);
                    _this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
                    _this.subscriptions = [];
                    if (_this.$modal) {
                        _this.$modal.data(DATA_KEY, null);
                        _this.$modal.remove();
                        _this.$modal = null;
                    }
                })).toPromise();
            };
        BsModalComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bs-modal',
                        template: "\n        <div class=\"modal-dialog\" [ngClass]=\"getCssClasses()\">\n            <div class=\"modal-content\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n    "
                    },] },
        ];
        /** @nocollapse */
        BsModalComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: BsModalService },
                { type: core.NgZone }
            ];
        };
        BsModalComponent.propDecorators = {
            animation: [{ type: core.Input }],
            backdrop: [{ type: core.Input }],
            keyboard: [{ type: core.Input }],
            size: [{ type: core.Input }],
            cssClass: [{ type: core.Input }],
            onShow: [{ type: core.Output }],
            onOpen: [{ type: core.Output }],
            onHide: [{ type: core.Output }],
            onClose: [{ type: core.Output }],
            onDismiss: [{ type: core.Output }],
            onLoaded: [{ type: core.Output }],
            fadeClass: [{ type: core.HostBinding, args: ['class.fade',] }],
            modalClass: [{ type: core.HostBinding, args: ['class.modal',] }],
            roleAttr: [{ type: core.HostBinding, args: ['attr.role',] }],
            tabindexAttr: [{ type: core.HostBinding, args: ['attr.tabindex',] }]
        };
        return BsModalComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BsModalHeaderComponent = (function () {
        function BsModalHeaderComponent(modal) {
            this.modal = modal;
            this.showDismiss = false;
        }
        BsModalHeaderComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bs-modal-header',
                        template: "\n        <div class=\"modal-header\">\n            <button *ngIf=\"showDismiss\" type=\"button\" class=\"close\" aria-label=\"Dismiss\" (click)=\"modal.dismiss()\">\n                <span aria-hidden=\"true\">&times;</span>\n            </button>\n            <ng-content></ng-content>\n        </div>\n    "
                    },] },
        ];
        /** @nocollapse */
        BsModalHeaderComponent.ctorParameters = function () {
            return [
                { type: BsModalComponent }
            ];
        };
        BsModalHeaderComponent.propDecorators = {
            showDismiss: [{ type: core.Input }]
        };
        return BsModalHeaderComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BsModalBodyComponent = (function () {
        function BsModalBodyComponent() {
        }
        BsModalBodyComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bs-modal-body',
                        template: "\n        <div class=\"modal-body\">\n            <ng-content></ng-content>\n        </div>\n    "
                    },] },
        ];
        return BsModalBodyComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BsModalFooterComponent = (function () {
        function BsModalFooterComponent(modal) {
            this.modal = modal;
            this.showDefaultButtons = false;
            this.dismissButtonLabel = 'Dismiss';
            this.closeButtonLabel = 'Close';
        }
        BsModalFooterComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'bs-modal-footer',
                        template: "\n        <div class=\"modal-footer\">\n            <ng-content></ng-content>\n            <button *ngIf=\"showDefaultButtons\" type=\"button\" class=\"btn btn-default\" (click)=\"modal.dismiss()\">\n                {{dismissButtonLabel}}\n            </button>\n            <button *ngIf=\"showDefaultButtons\" type=\"button\" class=\"btn btn-primary\" (click)=\"modal.close()\">\n                {{closeButtonLabel}}\n              </button>\n        </div>\n    "
                    },] },
        ];
        /** @nocollapse */
        BsModalFooterComponent.ctorParameters = function () {
            return [
                { type: BsModalComponent }
            ];
        };
        BsModalFooterComponent.propDecorators = {
            showDefaultButtons: [{ type: core.Input }],
            dismissButtonLabel: [{ type: core.Input }],
            closeButtonLabel: [{ type: core.Input }]
        };
        return BsModalFooterComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BsAutofocusDirective = (function () {
        function BsAutofocusDirective(el, modal) {
            var _this = this;
            this.el = el;
            this.modal = modal;
            if (modal) {
                this.modal.onOpen.subscribe(function () {
                    _this.el.nativeElement.focus();
                });
            }
        }
        BsAutofocusDirective.decorators = [
            { type: core.Directive, args: [{
                        // tslint:disable-next-line:directive-selector
                        selector: '[autofocus]'
                    },] },
        ];
        /** @nocollapse */
        BsAutofocusDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: BsModalComponent, decorators: [{ type: core.Optional }] }
            ];
        };
        return BsAutofocusDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var BsModalModule = (function () {
        function BsModalModule() {
        }
        BsModalModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            BsModalComponent,
                            BsModalHeaderComponent,
                            BsModalBodyComponent,
                            BsModalFooterComponent,
                            BsAutofocusDirective
                        ],
                        providers: [
                            BsModalService
                        ],
                        exports: [
                            BsModalComponent,
                            BsModalHeaderComponent,
                            BsModalBodyComponent,
                            BsModalFooterComponent,
                            BsAutofocusDirective
                        ]
                    },] },
        ];
        return BsModalModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.BsModalService = BsModalService;
    exports.BsModalComponent = BsModalComponent;
    exports.BsModalHeaderComponent = BsModalHeaderComponent;
    exports.BsModalBodyComponent = BsModalBodyComponent;
    exports.BsModalFooterComponent = BsModalFooterComponent;
    exports.BsModalHideType = BsModalHideType;
    exports.BsModalSize = BsModalSize;
    exports.BsModalModule = BsModalModule;
    exports.ɵa = BsAutofocusDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,