/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, HostBinding, NgZone } from '@angular/core';
import { Observable, Subject, of as observableOf, fromEvent, merge, zip } from 'rxjs';
import { take, filter, tap, share, map } from 'rxjs/operators';
import { BsModalHideType, BsModalSize } from './models';
import { BsModalService } from './modal.service';
/** @type {?} */
const EVENT_SUFFIX = 'ng2-bs3-modal';
/** @type {?} */
const SHOW_EVENT_NAME = `show.bs.modal.${EVENT_SUFFIX}`;
/** @type {?} */
const SHOWN_EVENT_NAME = `shown.bs.modal.${EVENT_SUFFIX}`;
/** @type {?} */
const HIDE_EVENT_NAME = `hide.bs.modal.${EVENT_SUFFIX}`;
/** @type {?} */
const HIDDEN_EVENT_NAME = `hidden.bs.modal.${EVENT_SUFFIX}`;
/** @type {?} */
const LOADED_EVENT_NAME = `loaded.bs.modal.${EVENT_SUFFIX}`;
/** @type {?} */
const DATA_KEY = 'bs.modal';
export class BsModalComponent {
    /**
     * @param {?} element
     * @param {?} service
     * @param {?} zone
     */
    constructor(element, service, zone) {
        this.element = element;
        this.service = service;
        this.zone = zone;
        this.overrideSize = null;
        this.onInternalClose$ = new Subject();
        this.subscriptions = [];
        this.visible = false;
        this.showing = false;
        this.hiding = false;
        this.animation = true;
        this.backdrop = true;
        this.keyboard = true;
        this.onShow = new EventEmitter();
        this.onOpen = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onDismiss = new EventEmitter();
        this.onLoaded = new EventEmitter();
        this.setVisible = (isVisible) => {
            return () => {
                this.visible = isVisible;
                this.showing = false;
                this.hiding = false;
            };
        };
        this.setOptions = (options) => {
            /** @type {?} */
            let backdrop = options.backdrop;
            if (typeof backdrop === 'string' && backdrop !== 'static') {
                backdrop = true;
            }
            if (options.backdrop !== undefined) {
                this.options.backdrop = backdrop;
            }
            if (options.keyboard !== undefined) {
                this.options.keyboard = options.keyboard;
            }
        };
        this.service.add(this);
        this.init();
    }
    /**
     * @return {?}
     */
    get options() {
        if (!this.$modal) {
            this.init();
        }
        return this.$modal.data(DATA_KEY).options;
    }
    /**
     * @return {?}
     */
    get fadeClass() { return this.animation; }
    /**
     * @return {?}
     */
    get modalClass() { return true; }
    /**
     * @return {?}
     */
    get roleAttr() { return 'dialog'; }
    /**
     * @return {?}
     */
    get tabindexAttr() { return '-1'; }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wireUpEventEmitters();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.$dialog = this.$modal.find('.modal-dialog');
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.setOptions({
            backdrop: this.backdrop,
            keyboard: this.keyboard
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onInternalClose$.next(BsModalHideType.Destroy);
        return this.destroy();
    }
    /**
     * @return {?}
     */
    focus() {
        this.$modal.trigger('focus');
    }
    /**
     * @return {?}
     */
    routerCanDeactivate() {
        this.onInternalClose$.next(BsModalHideType.RouteChange);
        return this.destroy();
    }
    /**
     * @param {?=} size
     * @return {?}
     */
    open(size) {
        this.overrideSize = null;
        if (BsModalSize.isValidSize(size)) {
            this.overrideSize = size;
        }
        return this.show().toPromise();
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    close(value) {
        this.onInternalClose$.next(BsModalHideType.Close);
        return this.hide().pipe(tap(() => this.onClose.emit(value))).toPromise().then(() => value);
    }
    /**
     * @return {?}
     */
    dismiss() {
        this.onInternalClose$.next(BsModalHideType.Dismiss);
        return this.hide().toPromise();
    }
    /**
     * @return {?}
     */
    getCssClasses() {
        /** @type {?} */
        const classes = [];
        if (this.isSmall()) {
            classes.push('modal-sm');
        }
        if (this.isLarge()) {
            classes.push('modal-lg');
        }
        if (this.cssClass) {
            classes.push(this.cssClass);
        }
        return classes.join(' ');
    }
    /**
     * @return {?}
     */
    isSmall() {
        return this.overrideSize !== BsModalSize.Large
            && this.size === BsModalSize.Small
            || this.overrideSize === BsModalSize.Small;
    }
    /**
     * @return {?}
     */
    isLarge() {
        return this.overrideSize !== BsModalSize.Small
            && this.size === BsModalSize.Large
            || this.overrideSize === BsModalSize.Large;
    }
    /**
     * @return {?}
     */
    show() {
        if (this.visible && !this.hiding) {
            return observableOf(null);
        }
        this.showing = true;
        return Observable.create((o) => {
            this.onShown$.pipe(take(1)).subscribe(next => {
                o.next(next);
                o.complete();
            });
            this.transitionFix();
            this.$modal.modal('show');
        });
    }
    /**
     * @return {?}
     */
    transitionFix() {
        // Fix for shown.bs.modal not firing when .fade is present
        // https://github.com/twbs/bootstrap/issues/11793
        if (this.animation) {
            setTimeout(() => {
                this.$modal.trigger('focus').trigger(SHOWN_EVENT_NAME);
            }, jQuery.fn.modal['Constructor'].TRANSITION_DURATION);
        }
    }
    /**
     * @return {?}
     */
    hide() {
        if (!this.visible && !this.showing) {
            return observableOf(null);
        }
        this.hiding = true;
        return Observable.create((o) => {
            this.onHidden$.pipe(take(1)).subscribe(next => {
                o.next(next);
                o.complete();
            });
            this.$modal.modal('hide');
        });
    }
    /**
     * @return {?}
     */
    init() {
        this.$modal = jQuery(this.element.nativeElement);
        this.$modal.appendTo(document.body);
        this.$modal.modal({
            show: false
        });
        this.onShowEvent$ = fromEvent(this.$modal, SHOW_EVENT_NAME);
        this.onShownEvent$ = fromEvent(this.$modal, SHOWN_EVENT_NAME);
        this.onHideEvent$ = fromEvent(this.$modal, HIDE_EVENT_NAME);
        this.onHiddenEvent$ = fromEvent(this.$modal, HIDDEN_EVENT_NAME);
        this.onLoadedEvent$ = fromEvent(this.$modal, LOADED_EVENT_NAME);
        /** @type {?} */
        const onClose$ = merge(this.onInternalClose$, this.service.onBackdropClose$, this.service.onKeyboardClose$);
        this.onHide$ = zip(this.onHideEvent$, onClose$).pipe(map(x => /** @type {?} */ ({ event: x[0], type: x[1] })));
        this.onHidden$ = zip(this.onHiddenEvent$, onClose$).pipe(map(x => x[1]), tap(this.setVisible(false)), tap(() => this.service.focusNext()), share());
        this.onShown$ = this.onShownEvent$.pipe(tap(this.setVisible(true)), share());
        this.onDismiss$ = this.onHidden$.pipe(filter((x) => x !== BsModalHideType.Close));
        // Start watching for events
        this.subscriptions.push(...[
            this.onShown$.subscribe(() => { }),
            this.onHidden$.subscribe(() => { }),
            this.service.onModalStack$.subscribe(() => { })
        ]);
    }
    /**
     * @return {?}
     */
    wireUpEventEmitters() {
        this.wireUpEventEmitter(this.onShow, this.onShowEvent$);
        this.wireUpEventEmitter(this.onOpen, this.onShown$);
        this.wireUpEventEmitter(this.onHide, this.onHide$);
        this.wireUpEventEmitter(this.onDismiss, this.onDismiss$);
        this.wireUpEventEmitter(this.onLoaded, this.onLoadedEvent$);
    }
    /**
     * @template T
     * @param {?} emitter
     * @param {?} stream$
     * @return {?}
     */
    wireUpEventEmitter(emitter, stream$) {
        if (emitter.observers.length === 0) {
            return;
        }
        /** @type {?} */
        const sub = stream$.subscribe((next) => {
            this.zone.run(() => {
                emitter.next(next);
            });
        });
        this.subscriptions.push(sub);
    }
    /**
     * @return {?}
     */
    destroy() {
        return this.hide().pipe(tap(() => {
            this.service.remove(this);
            this.subscriptions.forEach(s => s.unsubscribe());
            this.subscriptions = [];
            if (this.$modal) {
                this.$modal.data(DATA_KEY, null);
                this.$modal.remove();
                this.$modal = null;
            }
        })).toPromise();
    }
}
BsModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'bs-modal',
                template: `
        <div class="modal-dialog" [ngClass]="getCssClasses()">
            <div class="modal-content">
                <ng-content></ng-content>
            </div>
        </div>
    `
            },] },
];
/** @nocollapse */
BsModalComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: BsModalService },
    { type: NgZone }
];
BsModalComponent.propDecorators = {
    animation: [{ type: Input }],
    backdrop: [{ type: Input }],
    keyboard: [{ type: Input }],
    size: [{ type: Input }],
    cssClass: [{ type: Input }],
    onShow: [{ type: Output }],
    onOpen: [{ type: Output }],
    onHide: [{ type: Output }],
    onClose: [{ type: Output }],
    onDismiss: [{ type: Output }],
    onLoaded: [{ type: Output }],
    fadeClass: [{ type: HostBinding, args: ['class.fade',] }],
    modalClass: [{ type: HostBinding, args: ['class.modal',] }],
    roleAttr: [{ type: HostBinding, args: ['attr.role',] }],
    tabindexAttr: [{ type: HostBinding, args: ['attr.tabindex',] }]
};
if (false) {
    /** @type {?} */
    BsModalComponent.prototype.overrideSize;
    /** @type {?} */
    BsModalComponent.prototype.$modal;
    /** @type {?} */
    BsModalComponent.prototype.$dialog;
    /** @type {?} */
    BsModalComponent.prototype.onShowEvent$;
    /** @type {?} */
    BsModalComponent.prototype.onShownEvent$;
    /** @type {?} */
    BsModalComponent.prototype.onHideEvent$;
    /** @type {?} */
    BsModalComponent.prototype.onHiddenEvent$;
    /** @type {?} */
    BsModalComponent.prototype.onLoadedEvent$;
    /** @type {?} */
    BsModalComponent.prototype.onShown$;
    /** @type {?} */
    BsModalComponent.prototype.onInternalClose$;
    /** @type {?} */
    BsModalComponent.prototype.onDismiss$;
    /** @type {?} */
    BsModalComponent.prototype.onHide$;
    /** @type {?} */
    BsModalComponent.prototype.onHidden$;
    /** @type {?} */
    BsModalComponent.prototype.subscriptions;
    /** @type {?} */
    BsModalComponent.prototype.visible;
    /** @type {?} */
    BsModalComponent.prototype.showing;
    /** @type {?} */
    BsModalComponent.prototype.hiding;
    /** @type {?} */
    BsModalComponent.prototype.animation;
    /** @type {?} */
    BsModalComponent.prototype.backdrop;
    /** @type {?} */
    BsModalComponent.prototype.keyboard;
    /** @type {?} */
    BsModalComponent.prototype.size;
    /** @type {?} */
    BsModalComponent.prototype.cssClass;
    /** @type {?} */
    BsModalComponent.prototype.onShow;
    /** @type {?} */
    BsModalComponent.prototype.onOpen;
    /** @type {?} */
    BsModalComponent.prototype.onHide;
    /** @type {?} */
    BsModalComponent.prototype.onClose;
    /** @type {?} */
    BsModalComponent.prototype.onDismiss;
    /** @type {?} */
    BsModalComponent.prototype.onLoaded;
    /** @type {?} */
    BsModalComponent.prototype.setVisible;
    /** @type {?} */
    BsModalComponent.prototype.setOptions;
    /** @type {?} */
    BsModalComponent.prototype.element;
    /** @type {?} */
    BsModalComponent.prototype.service;
    /** @type {?} */
    BsModalComponent.prototype.zone;
}

//# sourceMappingURL=data:application/json;base64,