import { Injectable, Component, Input, Output, EventEmitter, ElementRef, HostBinding, NgZone, Directive, Optional, NgModule } from '@angular/core';
import { fromEvent, Observable, Subject, of, merge, zip } from 'rxjs';
import { filter, map, share, tap, take } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
const BsModalHideType = {
    Close: 0,
    Dismiss: 1,
    Backdrop: 2,
    Keyboard: 3,
    RouteChange: 4,
    Destroy: 5,
};
BsModalHideType[BsModalHideType.Close] = 'Close';
BsModalHideType[BsModalHideType.Dismiss] = 'Dismiss';
BsModalHideType[BsModalHideType.Backdrop] = 'Backdrop';
BsModalHideType[BsModalHideType.Keyboard] = 'Keyboard';
BsModalHideType[BsModalHideType.RouteChange] = 'RouteChange';
BsModalHideType[BsModalHideType.Destroy] = 'Destroy';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class BsModalSize {
    /**
     * @param {?} size
     * @return {?}
     */
    static isValidSize(size) {
        return size && (size === BsModalSize.Small || size === BsModalSize.Large);
    }
}
BsModalSize.Small = 'sm';
BsModalSize.Large = 'lg';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const EVENT_SUFFIX = 'ng2-bs3-modal';
/** @type {?} */
const KEYUP_EVENT_NAME = `keyup.${EVENT_SUFFIX}`;
/** @type {?} */
const CLICK_EVENT_NAME = `click.${EVENT_SUFFIX}`;
/** @type {?} */
const SHOW_EVENT_NAME = `show.bs.modal.${EVENT_SUFFIX}`;
class BsModalService {
    constructor() {
        this.modals = [];
        this.$body = jQuery(document.body);
        this.onBackdropClose$ = fromEvent(this.$body, CLICK_EVENT_NAME).pipe(filter((e) => jQuery(e.target).is('.modal')), map(() => BsModalHideType.Backdrop), share());
        this.onKeyboardClose$ = fromEvent(this.$body, KEYUP_EVENT_NAME).pipe(filter((e) => e.which === 27), map(() => BsModalHideType.Keyboard), share());
        this.onModalStack$ = fromEvent(this.$body, SHOW_EVENT_NAME).pipe(tap(() => {
            /** @type {?} */
            const zIndex = 1040 + (10 * jQuery('.modal:visible').length);
            jQuery(this).css('z-index', zIndex);
            setTimeout(function () {
                jQuery('.modal-backdrop').not('.modal-stack').css('z-index', zIndex - 1).addClass('modal-stack');
            }, 0);
        }), share());
    }
    /**
     * @param {?} modal
     * @return {?}
     */
    add(modal) {
        this.modals.push(modal);
    }
    /**
     * @param {?} modal
     * @return {?}
     */
    remove(modal) {
        /** @type {?} */
        const index = this.modals.indexOf(modal);
        if (index > -1) {
            this.modals.splice(index, 1);
        }
    }
    /**
     * @return {?}
     */
    focusNext() {
        /** @type {?} */
        const visible = this.modals.filter(m => m.visible);
        if (visible.length) {
            this.$body.addClass('modal-open');
            visible[visible.length - 1].focus();
        }
    }
    /**
     * @return {?}
     */
    dismissAll() {
        return Promise.all(this.modals.map((m) => {
            return m.dismiss();
        }));
    }
}
BsModalService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
BsModalService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const EVENT_SUFFIX$1 = 'ng2-bs3-modal';
/** @type {?} */
const SHOW_EVENT_NAME$1 = `show.bs.modal.${EVENT_SUFFIX$1}`;
/** @type {?} */
const SHOWN_EVENT_NAME = `shown.bs.modal.${EVENT_SUFFIX$1}`;
/** @type {?} */
const HIDE_EVENT_NAME = `hide.bs.modal.${EVENT_SUFFIX$1}`;
/** @type {?} */
const HIDDEN_EVENT_NAME = `hidden.bs.modal.${EVENT_SUFFIX$1}`;
/** @type {?} */
const LOADED_EVENT_NAME = `loaded.bs.modal.${EVENT_SUFFIX$1}`;
/** @type {?} */
const DATA_KEY = 'bs.modal';
class BsModalComponent {
    /**
     * @param {?} element
     * @param {?} service
     * @param {?} zone
     */
    constructor(element, service, zone) {
        this.element = element;
        this.service = service;
        this.zone = zone;
        this.overrideSize = null;
        this.onInternalClose$ = new Subject();
        this.subscriptions = [];
        this.visible = false;
        this.showing = false;
        this.hiding = false;
        this.animation = true;
        this.backdrop = true;
        this.keyboard = true;
        this.onShow = new EventEmitter();
        this.onOpen = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onDismiss = new EventEmitter();
        this.onLoaded = new EventEmitter();
        this.setVisible = (isVisible) => {
            return () => {
                this.visible = isVisible;
                this.showing = false;
                this.hiding = false;
            };
        };
        this.setOptions = (options) => {
            /** @type {?} */
            let backdrop = options.backdrop;
            if (typeof backdrop === 'string' && backdrop !== 'static') {
                backdrop = true;
            }
            if (options.backdrop !== undefined) {
                this.options.backdrop = backdrop;
            }
            if (options.keyboard !== undefined) {
                this.options.keyboard = options.keyboard;
            }
        };
        this.service.add(this);
        this.init();
    }
    /**
     * @return {?}
     */
    get options() {
        if (!this.$modal) {
            this.init();
        }
        return this.$modal.data(DATA_KEY).options;
    }
    /**
     * @return {?}
     */
    get fadeClass() { return this.animation; }
    /**
     * @return {?}
     */
    get modalClass() { return true; }
    /**
     * @return {?}
     */
    get roleAttr() { return 'dialog'; }
    /**
     * @return {?}
     */
    get tabindexAttr() { return '-1'; }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wireUpEventEmitters();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.$dialog = this.$modal.find('.modal-dialog');
    }
    /**
     * @return {?}
     */
    ngOnChanges() {
        this.setOptions({
            backdrop: this.backdrop,
            keyboard: this.keyboard
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.onInternalClose$.next(BsModalHideType.Destroy);
        return this.destroy();
    }
    /**
     * @return {?}
     */
    focus() {
        this.$modal.trigger('focus');
    }
    /**
     * @return {?}
     */
    routerCanDeactivate() {
        this.onInternalClose$.next(BsModalHideType.RouteChange);
        return this.destroy();
    }
    /**
     * @param {?=} size
     * @return {?}
     */
    open(size) {
        this.overrideSize = null;
        if (BsModalSize.isValidSize(size)) {
            this.overrideSize = size;
        }
        return this.show().toPromise();
    }
    /**
     * @param {?=} value
     * @return {?}
     */
    close(value) {
        this.onInternalClose$.next(BsModalHideType.Close);
        return this.hide().pipe(tap(() => this.onClose.emit(value))).toPromise().then(() => value);
    }
    /**
     * @return {?}
     */
    dismiss() {
        this.onInternalClose$.next(BsModalHideType.Dismiss);
        return this.hide().toPromise();
    }
    /**
     * @return {?}
     */
    getCssClasses() {
        /** @type {?} */
        const classes = [];
        if (this.isSmall()) {
            classes.push('modal-sm');
        }
        if (this.isLarge()) {
            classes.push('modal-lg');
        }
        if (this.cssClass) {
            classes.push(this.cssClass);
        }
        return classes.join(' ');
    }
    /**
     * @return {?}
     */
    isSmall() {
        return this.overrideSize !== BsModalSize.Large
            && this.size === BsModalSize.Small
            || this.overrideSize === BsModalSize.Small;
    }
    /**
     * @return {?}
     */
    isLarge() {
        return this.overrideSize !== BsModalSize.Small
            && this.size === BsModalSize.Large
            || this.overrideSize === BsModalSize.Large;
    }
    /**
     * @return {?}
     */
    show() {
        if (this.visible && !this.hiding) {
            return of(null);
        }
        this.showing = true;
        return Observable.create((o) => {
            this.onShown$.pipe(take(1)).subscribe(next => {
                o.next(next);
                o.complete();
            });
            this.transitionFix();
            this.$modal.modal('show');
        });
    }
    /**
     * @return {?}
     */
    transitionFix() {
        // Fix for shown.bs.modal not firing when .fade is present
        // https://github.com/twbs/bootstrap/issues/11793
        if (this.animation) {
            setTimeout(() => {
                this.$modal.trigger('focus').trigger(SHOWN_EVENT_NAME);
            }, jQuery.fn.modal['Constructor'].TRANSITION_DURATION);
        }
    }
    /**
     * @return {?}
     */
    hide() {
        if (!this.visible && !this.showing) {
            return of(null);
        }
        this.hiding = true;
        return Observable.create((o) => {
            this.onHidden$.pipe(take(1)).subscribe(next => {
                o.next(next);
                o.complete();
            });
            this.$modal.modal('hide');
        });
    }
    /**
     * @return {?}
     */
    init() {
        this.$modal = jQuery(this.element.nativeElement);
        this.$modal.appendTo(document.body);
        this.$modal.modal({
            show: false
        });
        this.onShowEvent$ = fromEvent(this.$modal, SHOW_EVENT_NAME$1);
        this.onShownEvent$ = fromEvent(this.$modal, SHOWN_EVENT_NAME);
        this.onHideEvent$ = fromEvent(this.$modal, HIDE_EVENT_NAME);
        this.onHiddenEvent$ = fromEvent(this.$modal, HIDDEN_EVENT_NAME);
        this.onLoadedEvent$ = fromEvent(this.$modal, LOADED_EVENT_NAME);
        /** @type {?} */
        const onClose$ = merge(this.onInternalClose$, this.service.onBackdropClose$, this.service.onKeyboardClose$);
        this.onHide$ = zip(this.onHideEvent$, onClose$).pipe(map(x => /** @type {?} */ ({ event: x[0], type: x[1] })));
        this.onHidden$ = zip(this.onHiddenEvent$, onClose$).pipe(map(x => x[1]), tap(this.setVisible(false)), tap(() => this.service.focusNext()), share());
        this.onShown$ = this.onShownEvent$.pipe(tap(this.setVisible(true)), share());
        this.onDismiss$ = this.onHidden$.pipe(filter((x) => x !== BsModalHideType.Close));
        // Start watching for events
        this.subscriptions.push(...[
            this.onShown$.subscribe(() => { }),
            this.onHidden$.subscribe(() => { }),
            this.service.onModalStack$.subscribe(() => { })
        ]);
    }
    /**
     * @return {?}
     */
    wireUpEventEmitters() {
        this.wireUpEventEmitter(this.onShow, this.onShowEvent$);
        this.wireUpEventEmitter(this.onOpen, this.onShown$);
        this.wireUpEventEmitter(this.onHide, this.onHide$);
        this.wireUpEventEmitter(this.onDismiss, this.onDismiss$);
        this.wireUpEventEmitter(this.onLoaded, this.onLoadedEvent$);
    }
    /**
     * @template T
     * @param {?} emitter
     * @param {?} stream$
     * @return {?}
     */
    wireUpEventEmitter(emitter, stream$) {
        if (emitter.observers.length === 0) {
            return;
        }
        /** @type {?} */
        const sub = stream$.subscribe((next) => {
            this.zone.run(() => {
                emitter.next(next);
            });
        });
        this.subscriptions.push(sub);
    }
    /**
     * @return {?}
     */
    destroy() {
        return this.hide().pipe(tap(() => {
            this.service.remove(this);
            this.subscriptions.forEach(s => s.unsubscribe());
            this.subscriptions = [];
            if (this.$modal) {
                this.$modal.data(DATA_KEY, null);
                this.$modal.remove();
                this.$modal = null;
            }
        })).toPromise();
    }
}
BsModalComponent.decorators = [
    { type: Component, args: [{
                selector: 'bs-modal',
                template: `
        <div class="modal-dialog" [ngClass]="getCssClasses()">
            <div class="modal-content">
                <ng-content></ng-content>
            </div>
        </div>
    `
            },] },
];
/** @nocollapse */
BsModalComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: BsModalService },
    { type: NgZone }
];
BsModalComponent.propDecorators = {
    animation: [{ type: Input }],
    backdrop: [{ type: Input }],
    keyboard: [{ type: Input }],
    size: [{ type: Input }],
    cssClass: [{ type: Input }],
    onShow: [{ type: Output }],
    onOpen: [{ type: Output }],
    onHide: [{ type: Output }],
    onClose: [{ type: Output }],
    onDismiss: [{ type: Output }],
    onLoaded: [{ type: Output }],
    fadeClass: [{ type: HostBinding, args: ['class.fade',] }],
    modalClass: [{ type: HostBinding, args: ['class.modal',] }],
    roleAttr: [{ type: HostBinding, args: ['attr.role',] }],
    tabindexAttr: [{ type: HostBinding, args: ['attr.tabindex',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class BsModalHeaderComponent {
    /**
     * @param {?} modal
     */
    constructor(modal) {
        this.modal = modal;
        this.showDismiss = false;
    }
}
BsModalHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'bs-modal-header',
                template: `
        <div class="modal-header">
            <button *ngIf="showDismiss" type="button" class="close" aria-label="Dismiss" (click)="modal.dismiss()">
                <span aria-hidden="true">&times;</span>
            </button>
            <ng-content></ng-content>
        </div>
    `
            },] },
];
/** @nocollapse */
BsModalHeaderComponent.ctorParameters = () => [
    { type: BsModalComponent }
];
BsModalHeaderComponent.propDecorators = {
    showDismiss: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class BsModalBodyComponent {
}
BsModalBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'bs-modal-body',
                template: `
        <div class="modal-body">
            <ng-content></ng-content>
        </div>
    `
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class BsModalFooterComponent {
    /**
     * @param {?} modal
     */
    constructor(modal) {
        this.modal = modal;
        this.showDefaultButtons = false;
        this.dismissButtonLabel = 'Dismiss';
        this.closeButtonLabel = 'Close';
    }
}
BsModalFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'bs-modal-footer',
                template: `
        <div class="modal-footer">
            <ng-content></ng-content>
            <button *ngIf="showDefaultButtons" type="button" class="btn btn-default" (click)="modal.dismiss()">
                {{dismissButtonLabel}}
            </button>
            <button *ngIf="showDefaultButtons" type="button" class="btn btn-primary" (click)="modal.close()">
                {{closeButtonLabel}}
              </button>
        </div>
    `
            },] },
];
/** @nocollapse */
BsModalFooterComponent.ctorParameters = () => [
    { type: BsModalComponent }
];
BsModalFooterComponent.propDecorators = {
    showDefaultButtons: [{ type: Input }],
    dismissButtonLabel: [{ type: Input }],
    closeButtonLabel: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class BsAutofocusDirective {
    /**
     * @param {?} el
     * @param {?} modal
     */
    constructor(el, modal) {
        this.el = el;
        this.modal = modal;
        if (modal) {
            this.modal.onOpen.subscribe(() => {
                this.el.nativeElement.focus();
            });
        }
    }
}
BsAutofocusDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line:directive-selector
                selector: '[autofocus]'
            },] },
];
/** @nocollapse */
BsAutofocusDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: BsModalComponent, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class BsModalModule {
}
BsModalModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    BsModalComponent,
                    BsModalHeaderComponent,
                    BsModalBodyComponent,
                    BsModalFooterComponent,
                    BsAutofocusDirective
                ],
                providers: [
                    BsModalService
                ],
                exports: [
                    BsModalComponent,
                    BsModalHeaderComponent,
                    BsModalBodyComponent,
                    BsModalFooterComponent,
                    BsAutofocusDirective
                ]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { BsModalService, BsModalComponent, BsModalHeaderComponent, BsModalBodyComponent, BsModalFooterComponent, BsModalHideType, BsModalSize, BsModalModule, BsAutofocusDirective as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,