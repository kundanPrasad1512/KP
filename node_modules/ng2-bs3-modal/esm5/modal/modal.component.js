/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ElementRef, HostBinding, NgZone } from '@angular/core';
import { Observable, Subject, of as observableOf, fromEvent, merge, zip } from 'rxjs';
import { take, filter, tap, share, map } from 'rxjs/operators';
import { BsModalHideType, BsModalSize } from './models';
import { BsModalService } from './modal.service';
/** @type {?} */
var EVENT_SUFFIX = 'ng2-bs3-modal';
/** @type {?} */
var SHOW_EVENT_NAME = "show.bs.modal." + EVENT_SUFFIX;
/** @type {?} */
var SHOWN_EVENT_NAME = "shown.bs.modal." + EVENT_SUFFIX;
/** @type {?} */
var HIDE_EVENT_NAME = "hide.bs.modal." + EVENT_SUFFIX;
/** @type {?} */
var HIDDEN_EVENT_NAME = "hidden.bs.modal." + EVENT_SUFFIX;
/** @type {?} */
var LOADED_EVENT_NAME = "loaded.bs.modal." + EVENT_SUFFIX;
/** @type {?} */
var DATA_KEY = 'bs.modal';
var BsModalComponent = /** @class */ (function () {
    function BsModalComponent(element, service, zone) {
        var _this = this;
        this.element = element;
        this.service = service;
        this.zone = zone;
        this.overrideSize = null;
        this.onInternalClose$ = new Subject();
        this.subscriptions = [];
        this.visible = false;
        this.showing = false;
        this.hiding = false;
        this.animation = true;
        this.backdrop = true;
        this.keyboard = true;
        this.onShow = new EventEmitter();
        this.onOpen = new EventEmitter();
        this.onHide = new EventEmitter();
        this.onClose = new EventEmitter();
        this.onDismiss = new EventEmitter();
        this.onLoaded = new EventEmitter();
        this.setVisible = function (isVisible) {
            return function () {
                _this.visible = isVisible;
                _this.showing = false;
                _this.hiding = false;
            };
        };
        this.setOptions = function (options) {
            /** @type {?} */
            var backdrop = options.backdrop;
            if (typeof backdrop === 'string' && backdrop !== 'static') {
                backdrop = true;
            }
            if (options.backdrop !== undefined) {
                _this.options.backdrop = backdrop;
            }
            if (options.keyboard !== undefined) {
                _this.options.keyboard = options.keyboard;
            }
        };
        this.service.add(this);
        this.init();
    }
    Object.defineProperty(BsModalComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.$modal) {
                this.init();
            }
            return this.$modal.data(DATA_KEY).options;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsModalComponent.prototype, "fadeClass", {
        get: /**
         * @return {?}
         */
        function () { return this.animation; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsModalComponent.prototype, "modalClass", {
        get: /**
         * @return {?}
         */
        function () { return true; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsModalComponent.prototype, "roleAttr", {
        get: /**
         * @return {?}
         */
        function () { return 'dialog'; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BsModalComponent.prototype, "tabindexAttr", {
        get: /**
         * @return {?}
         */
        function () { return '-1'; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    BsModalComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.wireUpEventEmitters();
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.$dialog = this.$modal.find('.modal-dialog');
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        this.setOptions({
            backdrop: this.backdrop,
            keyboard: this.keyboard
        });
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.onInternalClose$.next(BsModalHideType.Destroy);
        return this.destroy();
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.focus = /**
     * @return {?}
     */
    function () {
        this.$modal.trigger('focus');
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.routerCanDeactivate = /**
     * @return {?}
     */
    function () {
        this.onInternalClose$.next(BsModalHideType.RouteChange);
        return this.destroy();
    };
    /**
     * @param {?=} size
     * @return {?}
     */
    BsModalComponent.prototype.open = /**
     * @param {?=} size
     * @return {?}
     */
    function (size) {
        this.overrideSize = null;
        if (BsModalSize.isValidSize(size)) {
            this.overrideSize = size;
        }
        return this.show().toPromise();
    };
    /**
     * @param {?=} value
     * @return {?}
     */
    BsModalComponent.prototype.close = /**
     * @param {?=} value
     * @return {?}
     */
    function (value) {
        var _this = this;
        this.onInternalClose$.next(BsModalHideType.Close);
        return this.hide().pipe(tap(function () { return _this.onClose.emit(value); })).toPromise().then(function () { return value; });
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.dismiss = /**
     * @return {?}
     */
    function () {
        this.onInternalClose$.next(BsModalHideType.Dismiss);
        return this.hide().toPromise();
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.getCssClasses = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var classes = [];
        if (this.isSmall()) {
            classes.push('modal-sm');
        }
        if (this.isLarge()) {
            classes.push('modal-lg');
        }
        if (this.cssClass) {
            classes.push(this.cssClass);
        }
        return classes.join(' ');
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.isSmall = /**
     * @return {?}
     */
    function () {
        return this.overrideSize !== BsModalSize.Large
            && this.size === BsModalSize.Small
            || this.overrideSize === BsModalSize.Small;
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.isLarge = /**
     * @return {?}
     */
    function () {
        return this.overrideSize !== BsModalSize.Small
            && this.size === BsModalSize.Large
            || this.overrideSize === BsModalSize.Large;
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.visible && !this.hiding) {
            return observableOf(null);
        }
        this.showing = true;
        return Observable.create(function (o) {
            _this.onShown$.pipe(take(1)).subscribe(function (next) {
                o.next(next);
                o.complete();
            });
            _this.transitionFix();
            _this.$modal.modal('show');
        });
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.transitionFix = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // Fix for shown.bs.modal not firing when .fade is present
        // https://github.com/twbs/bootstrap/issues/11793
        if (this.animation) {
            setTimeout(function () {
                _this.$modal.trigger('focus').trigger(SHOWN_EVENT_NAME);
            }, jQuery.fn.modal['Constructor'].TRANSITION_DURATION);
        }
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.visible && !this.showing) {
            return observableOf(null);
        }
        this.hiding = true;
        return Observable.create(function (o) {
            _this.onHidden$.pipe(take(1)).subscribe(function (next) {
                o.next(next);
                o.complete();
            });
            _this.$modal.modal('hide');
        });
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.init = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.$modal = jQuery(this.element.nativeElement);
        this.$modal.appendTo(document.body);
        this.$modal.modal({
            show: false
        });
        this.onShowEvent$ = fromEvent(this.$modal, SHOW_EVENT_NAME);
        this.onShownEvent$ = fromEvent(this.$modal, SHOWN_EVENT_NAME);
        this.onHideEvent$ = fromEvent(this.$modal, HIDE_EVENT_NAME);
        this.onHiddenEvent$ = fromEvent(this.$modal, HIDDEN_EVENT_NAME);
        this.onLoadedEvent$ = fromEvent(this.$modal, LOADED_EVENT_NAME);
        /** @type {?} */
        var onClose$ = merge(this.onInternalClose$, this.service.onBackdropClose$, this.service.onKeyboardClose$);
        this.onHide$ = zip(this.onHideEvent$, onClose$).pipe(map(function (x) { return ({ event: x[0], type: x[1] }); }));
        this.onHidden$ = zip(this.onHiddenEvent$, onClose$).pipe(map(function (x) { return x[1]; }), tap(this.setVisible(false)), tap(function () { return _this.service.focusNext(); }), share());
        this.onShown$ = this.onShownEvent$.pipe(tap(this.setVisible(true)), share());
        this.onDismiss$ = this.onHidden$.pipe(filter(function (x) { return x !== BsModalHideType.Close; }));
        // Start watching for events
        // Start watching for events
        (_a = this.subscriptions).push.apply(_a, tslib_1.__spread([
            this.onShown$.subscribe(function () { }),
            this.onHidden$.subscribe(function () { }),
            this.service.onModalStack$.subscribe(function () { })
        ]));
        var _a;
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.wireUpEventEmitters = /**
     * @return {?}
     */
    function () {
        this.wireUpEventEmitter(this.onShow, this.onShowEvent$);
        this.wireUpEventEmitter(this.onOpen, this.onShown$);
        this.wireUpEventEmitter(this.onHide, this.onHide$);
        this.wireUpEventEmitter(this.onDismiss, this.onDismiss$);
        this.wireUpEventEmitter(this.onLoaded, this.onLoadedEvent$);
    };
    /**
     * @template T
     * @param {?} emitter
     * @param {?} stream$
     * @return {?}
     */
    BsModalComponent.prototype.wireUpEventEmitter = /**
     * @template T
     * @param {?} emitter
     * @param {?} stream$
     * @return {?}
     */
    function (emitter, stream$) {
        var _this = this;
        if (emitter.observers.length === 0) {
            return;
        }
        /** @type {?} */
        var sub = stream$.subscribe(function (next) {
            _this.zone.run(function () {
                emitter.next(next);
            });
        });
        this.subscriptions.push(sub);
    };
    /**
     * @return {?}
     */
    BsModalComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.hide().pipe(tap(function () {
            _this.service.remove(_this);
            _this.subscriptions.forEach(function (s) { return s.unsubscribe(); });
            _this.subscriptions = [];
            if (_this.$modal) {
                _this.$modal.data(DATA_KEY, null);
                _this.$modal.remove();
                _this.$modal = null;
            }
        })).toPromise();
    };
    BsModalComponent.decorators = [
        { type: Component, args: [{
                    selector: 'bs-modal',
                    template: "\n        <div class=\"modal-dialog\" [ngClass]=\"getCssClasses()\">\n            <div class=\"modal-content\">\n                <ng-content></ng-content>\n            </div>\n        </div>\n    "
                },] },
    ];
    /** @nocollapse */
    BsModalComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: BsModalService },
        { type: NgZone }
    ]; };
    BsModalComponent.propDecorators = {
        animation: [{ type: Input }],
        backdrop: [{ type: Input }],
        keyboard: [{ type: Input }],
        size: [{ type: Input }],
        cssClass: [{ type: Input }],
        onShow: [{ type: Output }],
        onOpen: [{ type: Output }],
        onHide: [{ type: Output }],
        onClose: [{ type: Output }],
        onDismiss: [{ type: Output }],
        onLoaded: [{ type: Output }],
        fadeClass: [{ type: HostBinding, args: ['class.fade',] }],
        modalClass: [{ type: HostBinding, args: ['class.modal',] }],
        roleAttr: [{ type: HostBinding, args: ['attr.role',] }],
        tabindexAttr: [{ type: HostBinding, args: ['attr.tabindex',] }]
    };
    return BsModalComponent;
}());
export { BsModalComponent };
if (false) {
    /** @type {?} */
    BsModalComponent.prototype.overrideSize;
    /** @type {?} */
    BsModalComponent.prototype.$modal;
    /** @type {?} */
    BsModalComponent.prototype.$dialog;
    /** @type {?} */
    BsModalComponent.prototype.onShowEvent$;
    /** @type {?} */
    BsModalComponent.prototype.onShownEvent$;
    /** @type {?} */
    BsModalComponent.prototype.onHideEvent$;
    /** @type {?} */
    BsModalComponent.prototype.onHiddenEvent$;
    /** @type {?} */
    BsModalComponent.prototype.onLoadedEvent$;
    /** @type {?} */
    BsModalComponent.prototype.onShown$;
    /** @type {?} */
    BsModalComponent.prototype.onInternalClose$;
    /** @type {?} */
    BsModalComponent.prototype.onDismiss$;
    /** @type {?} */
    BsModalComponent.prototype.onHide$;
    /** @type {?} */
    BsModalComponent.prototype.onHidden$;
    /** @type {?} */
    BsModalComponent.prototype.subscriptions;
    /** @type {?} */
    BsModalComponent.prototype.visible;
    /** @type {?} */
    BsModalComponent.prototype.showing;
    /** @type {?} */
    BsModalComponent.prototype.hiding;
    /** @type {?} */
    BsModalComponent.prototype.animation;
    /** @type {?} */
    BsModalComponent.prototype.backdrop;
    /** @type {?} */
    BsModalComponent.prototype.keyboard;
    /** @type {?} */
    BsModalComponent.prototype.size;
    /** @type {?} */
    BsModalComponent.prototype.cssClass;
    /** @type {?} */
    BsModalComponent.prototype.onShow;
    /** @type {?} */
    BsModalComponent.prototype.onOpen;
    /** @type {?} */
    BsModalComponent.prototype.onHide;
    /** @type {?} */
    BsModalComponent.prototype.onClose;
    /** @type {?} */
    BsModalComponent.prototype.onDismiss;
    /** @type {?} */
    BsModalComponent.prototype.onLoaded;
    /** @type {?} */
    BsModalComponent.prototype.setVisible;
    /** @type {?} */
    BsModalComponent.prototype.setOptions;
    /** @type {?} */
    BsModalComponent.prototype.element;
    /** @type {?} */
    BsModalComponent.prototype.service;
    /** @type {?} */
    BsModalComponent.prototype.zone;
}

//# sourceMappingURL=data:application/json;base64,